# This file contains basic Makefile includes that contain all building
# instructions for all binaries and packages.

BUILD_FOR_LINUX=@BUILD_FOR_LINUX@
BUILD_FOR_WINDOWS=@BUILD_FOR_WINDOWS@

AR_FLAGS = cr
DBCORE = @DBCOREDIR@
INCLUDES = \
	-I$(DBCORE)/compress/cpp \
	-I$(DBCORE)/config/cpp \
	-I$(DBCORE)/crypto/cpp \
	-I$(DBCORE)/data/cpp \
	-I$(DBCORE)/event/cpp \
	-I$(DBCORE)/io/cpp \
	-I$(DBCORE)/logging/cpp \
	-I$(DBCORE)/mail/cpp \
	-I$(DBCORE)/modest/cpp \
	-I$(DBCORE)/net/cpp \
	-I$(DBCORE)/rt/cpp \
	-I$(DBCORE)/sql/cpp \
	-I$(DBCORE)/test/cpp \
	-I$(DBCORE)/util/cpp

MODULE_BASE_DIR = $(shell pwd)

# Linux-specific variables
LINUX_CXX = @LINUX_CXX@
LINUX_CXX_FLAGS = -g -Wall -fPIC $(MODULE_LINUX_CXX_FLAGS)
LINUX_INCLUDES = $(INCLUDES)
LINUX_LIB_DIR = $(DBCORE)/libs/linux
LINUX_LIBS = -L$(LINUX_LIB_DIR)
LINUX_AR = @LINUX_AR@
LINUX_BUILD_DIR = build/linux
LINUX_DIST_DIR = dist/linux
LINUX_LIBRARY_SOURCES := $(patsubst %.cpp,$(LINUX_BUILD_DIR)/%.cpp, $(SOURCES))
LINUX_EXECUTABLE_SOURCES := $(patsubst %,$(LINUX_BUILD_DIR)/%.cpp, $(EXECUTABLES))
LINUX_LIBRARY_OBJECTS := $(patsubst %.cpp,$(LINUX_BUILD_DIR)/%-linux.o, $(SOURCES))
LINUX_EXECUTABLE_OBJECTS := $(patsubst %,$(LINUX_BUILD_DIR)/%-linux.o, $(EXECUTABLES))
DYNAMIC_LINUX_LIBRARIES := $(DYNAMIC_LINK_LIBRARIES) $(DYNAMIC_LINUX_LIBRARIES)
LINUX_EXECUTABLES := $(patsubst %,$(LINUX_DIST_DIR)/%, $(EXECUTABLES))
LINUX_DEPENDENCIES := $(patsubst %.cpp,$(LINUX_BUILD_DIR)/%-linux.P, $(SOURCES))
LINUX_DEPENDENCIES += $(patsubst %.cpp,%-linux.P, $(LINUX_EXECUTABLE_SOURCES))

LINUX_LIBRARIES := $(patsubst %,$(LINUX_DIST_DIR)/lib%.so, $(LIBRARIES))
#LINUX_LIBRARIES += $(patsubst %,$(LINUX_DIST_DIR)/lib%.a, $(LIBRARIES))

# Windows-specific variables
WINDOWS_CXX = @WINDOWS_CXX@
WINDOWS_CXX_FLAGS += -g -Wall -D_WIN32_WINNT=0x0501 -DMODEST_API_EXPORT $(MODULE_WINDOWS_CXX_FLAGS)
WINDOWS_INCLUDES = $(INCLUDES) -I$(DBCORE)/3rdparty/cpp/pthread/include -I$(DBCORE)/3rdparty/cpp/openssl/include -I$(DBCORE)/3rdparty/cpp/expat/include -I$(DBCORE)/3rdparty/cpp/mysql/include -I$(DBCORE)/3rdparty/cpp/sqlite3/include
WINDOWS_LIB_DIR = $(DBCORE)/libs/windows
WINDOWS_LIBS = -L$(WINDOWS_LIB_DIR)
WINDOWS_AR = @WINDOWS_AR@
WINDOWS_AS = @WINDOWS_AS@
DYNAMIC_WINDOWS_LIBRARIES := $(DYNAMIC_LINK_LIBRARIES) $(DYNAMIC_WINDOWS_LIBRARIES)
WINDOWS_DLLWRAP = @WINDOWS_DLLWRAP@
WINDOWS_DLLWRAP_FLAGS = --as=$(WINDOWS_AS) --export-all --driver-name $(WINDOWS_CXX) -s
WINDOWS_BUILD_DIR = build/windows
WINDOWS_DIST_DIR = dist/windows
WINDOWS_LIBRARY_SOURCES := $(patsubst %.cpp,$(WINDOWS_BUILD_DIR)/%.cpp, $(SOURCES))
WINDOWS_EXECUTABLE_SOURCES := $(patsubst %,$(WINDOWS_BUILD_DIR)/%.cpp, $(EXECUTABLES))
WINDOWS_LIBRARY_OBJECTS := $(patsubst %.cpp,$(WINDOWS_BUILD_DIR)/%-windows.o, $(SOURCES))
WINDOWS_EXECUTABLE_OBJECTS := $(patsubst %,$(WINDOWS_BUILD_DIR)/%-windows.o, $(EXECUTABLES))
WINDOWS_EXECUTABLES := $(patsubst %,$(WINDOWS_DIST_DIR)/%, $(EXECUTABLES))
WINDOWS_DEPENDENCIES := $(patsubst %.cpp,$(WINDOWS_BUILD_DIR)/%-windows.P, $(SOURCES))
WINDOWS_DEPENDENCIES += $(patsubst %.cpp,-windows%.P, $(WINDOWS_EXECUTABLE_SOURCES))

WINDOWS_LIBRARIES := $(patsubst %,$(WINDOWS_DIST_DIR)/%.lib, $(LIBRARIES))
WINDOWS_LIBRARIES += $(patsubst %,$(WINDOWS_DIST_DIR)/%.dll, $(LIBRARIES))

ifeq ($(BUILD_FOR_LINUX),yes)
ALL_SOURCES += $(LINUX_LIBRARY_SOURCES) $(LINUX_EXECUTABLE_SOURCES)
ALL_OBJECTS += $(LINUX_LIBRARY_OBJECTS) $(LINUX_EXECUTABLE_OBJECTS)
ALL_LIBRARIES += $(LINUX_LIBRARIES)
ALL_EXECUTABLES += $(LINUX_EXECUTABLES)
ALL_DIRECTORIES += $(LINUX_BUILD_DIR) $(LINUX_DIST_DIR)
ifndef MAKE_CLEAN_ACTIVE
-include $(LINUX_DEPENDENCIES)
endif
endif
ifeq ($(BUILD_FOR_WINDOWS),yes)
ALL_SOURCES += $(WINDOWS_LIBRARY_SOURCES) $(WINDOWS_EXECUTABLE_SOURCES) 
ALL_OBJECTS += $(WINDOWS_LIBRARY_OBJECTS) $(WINDOWS_EXECUTABLE_OBJECTS) 
ALL_LIBRARIES += $(WINDOWS_LIBRARIES)
ALL_EXECUTABLES += $(WINDOWS_EXECUTABLES)
ALL_DIRECTORIES += $(WINDOWS_BUILD_DIR) $(WINDOWS_DIST_DIR)
ifndef MAKE_CLEAN_ACTIVE
-include $(WINDOWS_DEPENDENCIES)
endif
endif

.PHONY: all build-directories build-objects build-libraries build-executables clean clean-objects clean-libraries $(ALL_EXECUTABLES)

all: build-objects build-libraries build-executables

$(ALL_DIRECTORIES):
	mkdir -p $@

ifeq ($(BUILD_FOR_LINUX),yes)
$(LINUX_LIBRARY_SOURCES):
	@mkdir -p $(dir $@)
	@ln -sf $(subst $(LINUX_BUILD_DIR)/,$(MODULE_BASE_DIR)/,$@) $@
ifdef EXECUTABLES
$(LINUX_EXECUTABLE_SOURCES):
	@mkdir -p $(dir $@)
	@ln -sf $(subst $(LINUX_BUILD_DIR)/,$(MODULE_BASE_DIR)/,$@) $@
endif
endif

clean: clean-libraries clean-objects

clean-objects:
ifeq ($(BUILD_FOR_LINUX),yes)
	@rm -rf $(LINUX_BUILD_DIR)
endif
ifeq ($(BUILD_FOR_WINDOWS),yes)
	@rm -rf $(WINDOWS_BUILD_DIR)
endif

clean-libraries:
ifeq ($(BUILD_FOR_LINUX),yes)
	@rm -rf $(LINUX_DIST_DIR)
endif
ifeq ($(BUILD_FOR_WINDOWS),yes)
	@rm -rf $(WINDOWS_DIST_DIR)
endif

ifeq ($(BUILD_FOR_WINDOWS),yes)
$(WINDOWS_LIBRARY_SOURCES):
	@mkdir -p $(dir $@)
	@ln -sf $(subst $(WINDOWS_BUILD_DIR)/,$(MODULE_BASE_DIR)/,$@) $@
ifdef EXECUTABLES
$(WINDOWS_EXECUTABLE_SOURCES):
	@mkdir -p $(dir $@)
	@ln -sf $(subst $(WINDOWS_BUILD_DIR)/,$(MODULE_BASE_DIR)/,$@) $@
endif
endif

ifeq ($(BUILD_FOR_LINUX),yes)
%-linux.o %-linux.P: %.cpp
	@echo "Building $(basename $@).o..."
	@$(LINUX_CXX) $(LINUX_CXX_FLAGS) -c -MD -o $(basename $@).o $(LINUX_INCLUDES) -I. $<
	@cp $(basename $@).d $(basename $@).P; \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $(basename $@).d >> $(basename $@).P; \
		rm -f $(basename $@).d
endif

ifeq ($(BUILD_FOR_WINDOWS),yes)
%-windows.o %-windows.P: %.cpp
	@echo "Building $(basename $@).o..."
	@$(WINDOWS_CXX) $(WINDOWS_CXX_FLAGS) -c -MD -o $(basename $@).o $(WINDOWS_INCLUDES) -I. $<
	@cp $(basename $@).d $(basename $@).P; \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $(basename $@).d >> $(basename $@).P; \
		rm -f $(basename $@).d
endif

%.so: $(LINUX_LIBRARY_OBJECTS)
	@echo "Building $@..."
	@$(LINUX_CXX) $(LINUX_LIBS) -shared -o $@ $(LINUX_LIBRARY_OBJECTS) $(DYNAMIC_LINK_LIBRARIES:%=-l%)
	@mkdir -p $(LINUX_LIB_DIR)
	@ln -sf $(MODULE_BASE_DIR)/$@ $(LINUX_LIB_DIR)/$(@F)

%.dll: $(WINDOWS_LIBRARY_OBJECTS)
	@echo "Building $@..."
	@$(WINDOWS_DLLWRAP) $(WINDOWS_DLLWRAP_FLAGS) $(WINDOWS_LIBS) --output-def $(@:.dll=.def) --implib $(@:.dll=.lib) -o $@ $^ $(DYNAMIC_WINDOWS_LIBRARIES:%=$(WINDOWS_LIB_DIR)/%.dll) $(EXTRA_WINDOWS_LIBRARIES)
	@mkdir -p $(WINDOWS_LIB_DIR)
	@ln -sf $(MODULE_BASE_DIR)/$@ $(WINDOWS_LIB_DIR)/$(@F)

#ifeq ($(BUILD_FOR_LINUX),yes)
#%.a: $(LINUX_LIBRARY_OBJECTS)
#	@echo "Building $@..."
#	@$(LINUX_AR) $(AR_FLAGS) $@ $(LINUX_LIBRARY_OBJECTS)
#	@mkdir -p $(LINUX_LIB_DIR)
#	@ln -sf $(MODULE_BASE_DIR)/$@ $(LINUX_LIB_DIR)/$(@F)
#endif

%.lib: $(WINDOWS_LIBRARY_OBJECTS)
	@echo "Building $@..."
	@$(WINDOWS_AR) $(AR_FLAGS) $@ $(WINDOWS_LIBRARY_OBJECTS)
	@mkdir -p $(WINDOWS_LIB_DIR)
	@ln -sf $(MODULE_BASE_DIR)/$@ $(WINDOWS_LIB_DIR)/$(@F)

ifdef EXECUTABLES
ifeq ($(BUILD_FOR_LINUX),yes)
#$(STATIC_LINUX_LIBRARIES):
#	# This is a fake target to override the default .a build
$(LINUX_EXECUTABLES): $(LINUX_LIBRARY_SOURCES) $(LINUX_EXECUTABLE_SOURCES) $(LINUX_EXECUTABLE_OBJECTS) $(STATIC_LINUX_LIBRARIES)
	@echo "Building $(@F)..."
	@$(LINUX_CXX) $(LINUX_CXX_FLAGS) -L$(LINUX_LIB_DIR) -o $@ $(LINUX_BUILD_DIR)/$(@F)-linux.o $(DYNAMIC_LINUX_LIBRARIES:%=-l%)
endif

ifeq ($(BUILD_FOR_WINDOWS),yes)
$(STATIC_WINDOWS_LIBRARIES):
	# This is a fake target to override the default .lib build
$(WINDOWS_EXECUTABLES): $(WINDOWS_LIBRARY_SOURCES) $(WINDOWS_EXECUTABLE_SOURCES) $(WINDOWS_EXECUTABLE_OBJECTS) $(STATIC_WINDOWS_LIBRARIES)
	@echo "Building $(@F)..."
	@$(WINDOWS_CXX) $(WINDOWS_CXX_FLAGS) -L$(WINDOWS_LIB_DIR) -o $@ $(WINDOWS_BUILD_DIR)/$(@F)-windows.o $(DYNAMIC_WINDOWS_LIBRARIES:%=-l%) $(EXTRA_WINDOWS_LIBRARIES)
endif
endif

build-objects: $(ALL_DIRECTORIES) $(ALL_SOURCES) $(ALL_OBJECTS)

build-libraries: $(ALL_DIRECTORIES) $(ALL_LIBRARIES)

build-executables: $(ALL_DIRECTORIES) $(ALL_EXECUTABLES)

dump-variables:
	@echo BUILD_FOR_LINUX=$(BUILD_FOR_LINUX)
	@echo BUILD_FOR_WINDOWS=$(BUILD_FOR_WINDOWS)
	@echo AR_FLAGS=$(AR_FLAGS)
	@echo DBCORE=$(DBCORE)
	@echo INCLUDES=$(INCLUDES)
	@echo MODULE_BASE_DIR=$(MODULE_BASE_DIR)
# Linux-specific variables
	@echo LINUX_CXX=$(LINUX_CXX)
	@echo LINUX_CXX_FLAGS=$(LINUX_CXX_FLAGS)
	@echo LINUX_INCLUDES=$(LINUX_INCLUDES)
	@echo LINUX_LIB_DIR=$(LINUX_LIB_DIR)
	@echo LINUX_LIBS=$(LINUX_LIBS)
	@echo LINUX_AR=$(LINUX_AR)
	@echo LINUX_BUILD_DIR=$(LINUX_BUILD_DIR)
	@echo LINUX_DIST_DIR=$(LINUX_DIST_DIR)
	@echo DYNAMIC_LINUX_LIBRARIES=$(DYNAMIC_LINUX_LIBRARIES)
	@echo LINUX_LIBRARY_SOURCES=$(LINUX_LIBRARY_SOURCES)
	@echo LINUX_EXECUTABLE_SOURCES=$(LINUX_EXECUTABLE_SOURCES)
	@echo LINUX_LIBRARY_OBJECTS=$(LINUX_LIBRARY_OBJECTS)
	@echo LINUX_EXECUTABLE_OBJECTS=$(LINUX_EXECUTABLE_OBJECTS)
	@echo LINUX_EXECUTABLES=$(LINUX_EXECUTABLES)
	@echo LINUX_DEPENDENCIES=$(LINUX_DEPENDENCIES)
	@echo LINUX_LIBRARIES=$(LINUX_LIBRARIES)

# Windows-specific variables
	@echo WINDOWS_CXX=$(WINDOWS_CXX)
	@echo WINDOWS_CXX_FLAGS=$(WINDOWS_CXX_FLAGS)
	@echo WINDOWS_INCLUDES=$(WINDOWS_INCLUDES)
	@echo WINDOWS_LIB_DIR=$(WINDOWS_LIB_DIR)
	@echo WINDOWS_LIBS=$(WINDOWS_LIBS)
	@echo WINDOWS_AR=$(WINDOWS_AR)
	@echo WINDOWS_AS=$(WINDOWS_AS)
	@echo DYNAMIC_WINDOWS_LIBRARIES=$(DYNAMIC_WINDOWS_LIBRARIES)
	@echo WINDOWS_DLLWRAP=$(WINDOWS_DLLWRAP)
	@echo WINDOWS_DLLWRAP_FLAGS=$(WINDOWS_DLLWRAP_FLAGS)
	@echo WINDOWS_BUILD_DIR=$(WINDOWS_BUILD_DIR)
	@echo WINDOWS_DIST_DIR=$(WINDOWS_DIST_DIR)
	@echo WINDOWS_LIBRARY_SOURCES=$(WINDOWS_LIBRARY_SOURCES)
	@echo WINDOWS_EXECUTABLE_SOURCES=$(WINDOWS_EXECUTABLE_SOURCES)
	@echo WINDOWS_LIBRARY_OBJECTS=$(WINDOWS_LIBRARY_OBJECTS)
	@echo WINDOWS_EXECUTABLE_OBJECTS=$(WINDOWS_EXECUTABLE_OBJECTS)
	@echo WINDOWS_EXECUTABLES=$(WINDOWS_EXECUTABLES)
	@echo WINDOWS_DEPENDENCIES=$(WINDOWS_DEPENDENCIES)
	@echo WINDOWS_LIBRARIES=$(WINDOWS_LIBRARIES)

	@echo ALL_SOURCES=$(ALL_SOURCES)
	@echo ALL_OBJECTS=$(ALL_OBJECTS)
	@echo ALL_LIBRARIES=$(ALL_LIBRARIES)
	@echo ALL_EXECUTABLES=$(ALL_EXECUTABLES)
