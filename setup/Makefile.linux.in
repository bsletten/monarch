# This file contains platform-specific Makefile rules for building 
# Linux binaries and packages.

# Linux-specific variables
LINUX_CXX = @LINUX_CXX@
LINUX_CXX_FLAGS = @CXXFLAGS@ -march=i686 -Wall -fPIC -DLINUX $(MODULE_CXX_FLAGS) $(MODULE_LINUX_CXX_FLAGS) @DEFS@
LINUX_LD_FLAGS = @LDFLAGS@
LINUX_INCLUDES = $(INCLUDES)
LINUX_AR = @LINUX_AR@
LINUX_BUILD_DIR = $(DBCORE)/build/$(subst $(DBCORE)/cpp/,,$(CWD))
LINUX_DIST_DIR = $(DBCORE)/dist
LINUX_LIB_DIR = $(LINUX_DIST_DIR)/lib
LINUX_BIN_DIR = $(LINUX_DIST_DIR)/bin
LINUX_LIBS = -L$(LINUX_LIB_DIR) -L/usr/lib/mysql
LINUX_HEADER_FILES := $(patsubst %.h, $(DBCORE)/$(HEADER_DIST_DIR)/%.h, $(HEADERS))
LINUX_LIBRARY_SOURCES := $(patsubst %.cpp, $(LINUX_BUILD_DIR)/%.cpp, $(SOURCES))
LINUX_EXECUTABLE_SOURCES := $(patsubst %, $(LINUX_BUILD_DIR)/%.cpp, $(EXECUTABLES))
LINUX_LIBRARY_OBJECTS := $(patsubst %.cpp, $(LINUX_BUILD_DIR)/%-$(PLATFORM).o, $(SOURCES))
LINUX_EXECUTABLE_OBJECTS := $(patsubst %, $(LINUX_BUILD_DIR)/%-$(PLATFORM).o, $(EXECUTABLES))
DYNAMIC_LINUX_LIBRARIES := $(DYNAMIC_LINK_LIBRARIES) $(DYNAMIC_LINUX_LIBRARIES)
LINUX_EXECUTABLES := $(patsubst %, $(LINUX_DIST_DIR)/bin/%, $(EXECUTABLES))
LINUX_DEPENDENCIES := $(patsubst %.cpp, $(LINUX_BUILD_DIR)/%-$(PLATFORM).P, $(SOURCES))
LINUX_DEPENDENCIES += $(patsubst %.cpp, %-$(PLATFORM).P, $(LINUX_EXECUTABLE_SOURCES))

LINUX_LIBRARIES := $(patsubst %,$(LINUX_DIST_DIR)/lib/lib%.so, $(LIBRARIES))
#LINUX_LIBRARIES += $(patsubst %,$(LINUX_DIST_DIR)/lib/lib%.a, $(LIBRARIES))

ALL_HEADERS += $(LINUX_HEADER_FILES)
ALL_SOURCES += $(LINUX_LIBRARY_SOURCES) $(LINUX_EXECUTABLE_SOURCES)
ALL_OBJECTS += $(LINUX_LIBRARY_OBJECTS) $(LINUX_EXECUTABLE_OBJECTS)
ALL_LIBRARIES += $(LINUX_LIBRARIES)
ALL_EXECUTABLES += $(LINUX_EXECUTABLES)
ALL_DIRECTORIES += $(LINUX_BUILD_DIR) $(LINUX_DIST_DIR) $(LINUX_BIN_DIR) $(LINUX_LIB_DIR)

# Ignore dependencies if specified in the Makefile. This will ensure that the
# dependencies for all .cpp files are not pulled in and thus won't be built
ifndef IGNORE_DEPENDENCIES
-include $(LINUX_DEPENDENCIES)
endif

$(LINUX_HEADER_FILES): 
	$(PCMD) mkdir -p $(dir $@)
	$(PCMD) ln -sf $(subst $(DBCORE)/$(HEADER_DIST_DIR)/,$(CWD)/,$@) $@

# You can build either multiple executables per directory, or multiple
# libraries per directory, but not both.
ifdef EXECUTABLES
$(LINUX_EXECUTABLE_SOURCES):
	$(PCMD) mkdir -p $(dir $@)
	$(PCMD) ln -sf $(subst $(LINUX_BUILD_DIR)/,$(CWD)/,$@) $@
else
$(LINUX_LIBRARY_SOURCES):
	$(PCMD) mkdir -p $(dir $@)
	$(PCMD) ln -sf $(subst $(LINUX_BUILD_DIR)/,$(CWD)/,$@) $@
endif

clean-objects:
	$(PCMD) rm -rf $(LINUX_LIBRARY_OBJECTS) $(LINUX_EXECUTABLE_OBJECTS)

clean-libraries:
	$(PCMD) rm -rf $(LINUX_LIBRARIES)

%-$(PLATFORM).o %-$(PLATFORM).P: %.cpp
	@echo "Compiling build/$(subst .P,.o,$(subst $(DBCORE)/build/,,$@))..."
	$(PCMD) $(LINUX_CXX) $(LINUX_CXX_FLAGS) -c -MD -o $(basename $@).o $(LINUX_INCLUDES) -I. $(realpath $<)
	$(PCMD) cp $(basename $@).d $(basename $@).P; \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $(basename $@).d >> $(basename $@).P; \
		rm -f $(basename $@).d

%.so: $(LINUX_LIBRARY_OBJECTS)
	@echo "Linking $(subst $(DBCORE)/,,$@)..."
	$(PCMD) $(LINUX_CXX) $(LINUX_LD_FLAGS) $(LINUX_LIBS) -shared -o $@ $(LINUX_LIBRARY_OBJECTS) $(DYNAMIC_LINUX_LIBRARIES:%=-l%)

ifdef EXECUTABLES
$(LINUX_EXECUTABLES): $$(@F).cpp $(LINUX_BUILD_DIR)/$$(@F)-$(PLATFORM).o $(STATIC_LINUX_LIBRARIES) $$(foreach source,$$($$(subst -,_,$$(@F))_EXTRA_SOURCES),$(LINUX_BUILD_DIR)/$$(source)-$(PLATFORM).o)
	@echo "Linking dist/bin/$(@F)..."
	$(PCMD) $(LINUX_CXX) $(LINUX_CXX_FLAGS) $(LINUX_LD_FLAGS) $(LINUX_LIBS) \
		-o $@ $(LINUX_BUILD_DIR)/$(@F)-$(PLATFORM).o \
		$(foreach source,$($(subst -,_,$(@F))_EXTRA_SOURCES),$(LINUX_BUILD_DIR)/$(source)-$(PLATFORM).o) \
		$(DYNAMIC_LINUX_LIBRARIES:%=-l%) $(DYNAMIC_EXECUTABLE_LIBRARIES:%=-l%)
endif

dump-variables:
	@echo BUILD_FOR_LINUX=$(BUILD_FOR_LINUX)
	@echo BUILD_FOR_WINDOWS=$(BUILD_FOR_WINDOWS)
	@echo BUILD_FOR_MACOS=$(BUILD_FOR_MACOS)
	@echo AR_FLAGS=$(AR_FLAGS)
	@echo DBCORE=$(DBCORE)
	@echo INCLUDES=$(INCLUDES)
	@echo CWD=$(CWD)
# Linux-specific variables
	@echo LINUX_CXX=$(LINUX_CXX)
	@echo LINUX_CXX_FLAGS=$(LINUX_CXX_FLAGS)
	@echo LINUX_INCLUDES=$(LINUX_INCLUDES)
	@echo LINUX_LIB_DIR=$(LINUX_LIB_DIR)
	@echo LINUX_LIBS=$(LINUX_LIBS)
	@echo LINUX_AR=$(LINUX_AR)
	@echo LINUX_BUILD_DIR=$(LINUX_BUILD_DIR)
	@echo LINUX_DIST_DIR=$(LINUX_DIST_DIR)
	@echo DYNAMIC_LINUX_LIBRARIES=$(DYNAMIC_LINUX_LIBRARIES)
	@echo LINUX_LIBRARY_SOURCES=$(LINUX_LIBRARY_SOURCES)
	@echo LINUX_EXECUTABLE_SOURCES=$(LINUX_EXECUTABLE_SOURCES)
	@echo LINUX_LIBRARY_OBJECTS=$(LINUX_LIBRARY_OBJECTS)
	@echo LINUX_EXECUTABLE_OBJECTS=$(LINUX_EXECUTABLE_OBJECTS)
	@echo LINUX_EXECUTABLES=$(LINUX_EXECUTABLES)
	@echo LINUX_DEPENDENCIES=$(LINUX_DEPENDENCIES)
	@echo LINUX_LIBRARIES=$(LINUX_LIBRARIES)

	@echo ALL_SOURCES=$(ALL_SOURCES)
	@echo ALL_OBJECTS=$(ALL_OBJECTS)
	@echo ALL_LIBRARIES=$(ALL_LIBRARIES)
	@echo ALL_EXECUTABLES=$(ALL_EXECUTABLES)
