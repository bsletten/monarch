# The top-level Makefile that is used to build 

ALL_FILES=@ALL_FILES_ALGORITHM@

EXECUTABLE_SUBDIRS := \
	cpp/apps/js \
	cpp/apps/monarch \
	cpp/apps/portmap \
	cpp/apps/rdfa2jsonld \
	cpp/apps/tester \
	cpp/tests

ifeq (@BUILD_V8@,yes)
V8_SUBDIRS = cpp/v8
V8_INSTALL_LIBRARIES = dist/lib/libmov8.so
endif

SUBDIRS := \
	cpp/3rdparty \
	cpp/rt \
	cpp/util \
	cpp/io \
	cpp/compress \
	cpp/logging \
	cpp/modest \
	cpp/fiber \
	cpp/crypto \
	cpp/event \
	cpp/net \
	cpp/http \
	cpp/data \
	cpp/config \
	cpp/sphinx \
	cpp/validation \
	cpp/sql \
	cpp/sqlite3 \
	cpp/mail \
	cpp/mysql \
	cpp/upnp \
	cpp/ws \
	cpp/kernel \
	cpp/app \
	cpp/test \
	$(V8_SUBDIRS) \
	$(EXECUTABLE_SUBDIRS)

INSTALL_LIBRARIES := \
	dist/lib/libmoapp.so \
	dist/lib/libmoconfig.so \
	dist/lib/libmocompress.so \
	dist/lib/libmocrypto.so \
	dist/lib/libmodata.so \
	dist/lib/libmoevent.so \
	dist/lib/libmofiber.so \
	dist/lib/libmoio.so \
	dist/lib/libmokernel.so \
	dist/lib/libmologging.so \
	dist/lib/libmomail.so \
	dist/lib/libmomodest.so \
	dist/lib/libmonet.so \
	dist/lib/libmohttp.so \
	dist/lib/libmort.so \
	dist/lib/libmosql.so \
	dist/lib/libmosqlite3.so \
	dist/lib/libmomysql.so \
	dist/lib/libmoupnp.so \
	dist/lib/libmoutil.so \
	dist/lib/libmows.so \
	dist/lib/libmosphinx.so \
	$(V8_INSTALL_LIBRARIES) \
	dist/lib/libmovalidation.so

ifndef PRINT_DIRECTORIES
PRINT_DIRECTORIES_OPTS = --no-print-directory -s
endif
ifdef PRINT_COMMANDS
PRINT_COMMANDS_OPTS = PRINT_COMMANDS=$(PRINT_COMMANDS)
endif
# Maximum load is the number of CPU cores + 1
MAX_LOAD = $(shell (if [ -e /proc/cpuinfo ]; then (cat /proc/cpuinfo | grep -i ^processor && echo processor) | wc -l; else echo 2; fi))
MAKE_JOB_OPTS ?= -j -l $(MAX_LOAD).0

MAKE_CMD = $(PRINT_COMMANDS_OPTS) $(MAKE) $(MAKE_JOB_OPTS) $(PRINT_DIRECTORIES_OPTS)
MAKE_DIR = $(PRINT_COMMANDS_OPTS) $(MAKE_CMD) -C $(dir)

.PHONY: all verbose clean test internal-docs clean-docs

all: dist/build.stamp
	@echo "monarch build complete."

dist/build.stamp: $(ALL_FILES)
	@mkdir -p dist
	@$(foreach dir,$(SUBDIRS),IGNORE_DEPENDENCIES=true $(MAKE_DIR) build-headers &&) true
	@$(foreach dir,$(SUBDIRS),$(MAKE_DIR) build-objects build-libraries &&) true
	@$(foreach dir,$(EXECUTABLE_SUBDIRS),$(MAKE_DIR) build-executables &&) true
	@touch dist/build.stamp

clean:
	@rm -rf build
	@rm -rf dist
	@echo "Cleaned all objects and libraries."

# Note: When building for multiple archs this will see all the tests and
#       will likely fail for non-current archs.  This method is used since
#       it will work for single arch builds and is difficult to know which
#       arch to specify otherwise.
test: all
	cpp/tests/run-unit-tests.py

clean-docs:
	rm -rf docs/cpp-api

internal-docs: clean-docs
	mkdir -p docs/cpp-api
	doxygen setup/docs.doxygen

verbose:
	PRINT_DIRECTORIES=true $(MAKE) all

verbose-commands:
	PRINT_DIRECTORIES=true PRINT_COMMANDS=true $(MAKE) all

valgrind:
	./monarch-valgrind dist/bin/run-unit-tests

packages:
	@echo "Building Debian packages..."
	@rm -f debian
	@rm -f installers/packages/*
	@ln -s installers/debian debian
	@dpkg-buildpackage -us -uc -rfakeroot -b 
	@echo "Moving packages to installers/packages..."
	@rm ../monarch3*changes
	@mkdir -p installers/packages
	@mv ../monarch3*deb installers/packages

install:
	@mkdir -p $(PREFIX)/usr/lib
	@echo "Installing Monarch libraries in $(PREFIX)/usr/lib..."
	@$(foreach lib,$(INSTALL_LIBRARIES),install -m 644 $(lib) $(PREFIX)/usr/lib/$(notdir $(lib)).@FULL_DOTTED_VERSION@ &&) true
	@$(foreach lib,$(INSTALL_LIBRARIES),ln -s $(notdir $(lib)).@FULL_DOTTED_VERSION@ $(PREFIX)/usr/lib/$(notdir $(lib)).@MONARCH_VERSION_MAJOR@.@MONARCH_VERSION_MINOR@ &&) true
	@$(foreach lib,$(INSTALL_LIBRARIES),ln -s $(notdir $(lib)).@FULL_DOTTED_VERSION@ $(PREFIX)/usr/lib/$(notdir $(lib)).@MONARCH_VERSION_MAJOR@ &&) true
	@$(foreach lib,$(INSTALL_LIBRARIES),ln -s $(notdir $(lib)).@FULL_DOTTED_VERSION@ $(PREFIX)/usr/lib/$(notdir $(lib)) &&) true

