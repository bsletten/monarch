# The top-level Makefile that is used to build 

SUBDIRS := 3rdparty/cpp \
           rt/cpp \
           util/cpp \
           io/cpp \
           compress/cpp \
           logging/cpp \
           modest/cpp \
           fiber/cpp \
           crypto/cpp \
           event/cpp \
           data/cpp \
           net/cpp \
           config/cpp \
           mail/cpp \
           sphinx/cpp \
           sql/cpp \
           sqlite3/cpp \
           mysql/cpp \
           validation/cpp \
           app/cpp \
           test/cpp

INSTALL_LIBRARIES := \
	app/cpp/dist/linux/libdbapp.so \
	config/cpp/dist/linux/libdbconfig.so \
	compress/cpp/dist/linux/libdbcompress.so \
	crypto/cpp/dist/linux/libdbcrypto.so \
	data/cpp/dist/linux/libdbdata.so \
	event/cpp/dist/linux/libdbevent.so \
	fiber/cpp/dist/linux/libdbfiber.so \
	io/cpp/dist/linux/libdbio.so \
	logging/cpp/dist/linux/libdblogging.so \
	mail/cpp/dist/linux/libdbmail.so \
	modest/cpp/dist/linux/libdbmodest.so \
	net/cpp/dist/linux/libdbnet.so \
	rt/cpp/dist/linux/libdbrt.so \
	sql/cpp/dist/linux/libdbsql.so \
	sqlite3/cpp/dist/linux/libdbsqlite3.so \
	mysql/cpp/dist/linux/libdbmysql.so \
	test/cpp/dist/linux/libdbtest.so \
	util/cpp/dist/linux/libdbutil.so \
	sphinx/cpp/dist/linux/libdbsphinx.so \
	validation/cpp/dist/linux/libdbvalidation.so

ifndef PRINT_DIRECTORIES
PRINT_DIRECTORIES_OPTS = --no-print-directory -s
endif
ifdef PRINT_COMMANDS
PRINT_COMMANDS_OPTS = PRINT_COMMANDS=$(PRINT_COMMANDS)
endif
MAKE_JOB_OPTS ?= -j -l 5.0

MAKE_CMD = $(PRINT_COMMANDS_OPTS) $(MAKE) $(MAKE_JOB_OPTS) $(PRINT_DIRECTORIES_OPTS)
MAKE_DIR = $(PRINT_COMMANDS_OPTS) $(MAKE_CMD) -C $(dir)

.PHONY: all verbose clean test internal-docs clean-docs

all:
	@$(foreach dir,$(SUBDIRS),$(MAKE_DIR) build-objects build-libraries &&) true
	@$(foreach dir,$(SUBDIRS),$(MAKE_DIR) build-executables &&) true

clean:
	@$(foreach dir,$(SUBDIRS),MAKE_CLEAN_ACTIVE=true $(MAKE_DIR) clean &&) true
	@rm -rf libs/*
	@echo "Cleaned all objects and libraries."

# Note: When building for multiple archs this will see all the tests and
#       will likely fail for non-current archs.  This method is used since
#       it will work for single arch builds and is difficult to know which
#       arch to specify otherwise.
test: all
	./dbcore-run test/cpp/dist/*/run-unit-tests

clean-docs:
	rm -rf docs/cpp-api

internal-docs: clean-docs
	mkdir -p docs/cpp-api
	doxygen setup/docs.doxygen

verbose:
	PRINT_DIRECTORIES=true $(MAKE) all

verbose-commands:
	PRINT_DIRECTORIES=true PRINT_COMMANDS=true $(MAKE) all

valgrind:
	./dbcore-valgrind test/cpp/dist/linux/run-unit-tests

packages:
	@echo "Building Debian packages..."
	@rm -f debian
	@rm -f installers/packages/*
	@ln -s installers/debian debian
	@dpkg-buildpackage -us -uc -rfakeroot -b 
	@echo "Moving packages to installers/packages..."
	@rm ../libdbcore3*changes
	@mkdir -p installers/packages
	@mv ../libdbcore3*deb installers/packages

install:
	@mkdir -p $(PREFIX)/usr/lib
	@echo "Installing dbcore libraries in $(PREFIX)/usr/lib..."
	@$(foreach lib,$(INSTALL_LIBRARIES),install -m 644 $(lib) $(PREFIX)/usr/lib/$(notdir $(lib)).@FULL_VERSION@ &&) true
	@$(foreach lib,$(INSTALL_LIBRARIES),ln -s $(notdir $(lib)).@FULL_VERSION@ $(PREFIX)/usr/lib/$(notdir $(lib)).3.0 &&) true
	@$(foreach lib,$(INSTALL_LIBRARIES),ln -s $(notdir $(lib)).@FULL_VERSION@ $(PREFIX)/usr/lib/$(notdir $(lib)).3 &&) true
	@$(foreach lib,$(INSTALL_LIBRARIES),ln -s $(notdir $(lib)).@FULL_VERSION@ $(PREFIX)/usr/lib/$(notdir $(lib)) &&) true

deploy:
	@cd setup && cap deploy_dbcore

rollback:
	@cd setup && cap rollback_dbcore
